{
	"info": {
		"_postman_id": "706f71a0-d17c-41fd-8213-66bb48261148",
		"name": "e-learning",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Note Feature",
			"item": [
				{
					"name": "get all notes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c2453495-84ad-48fc-88d9-51a75fa90a43",
								"exec": [
									"pm.test(\"server should response with 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should be json array\", function () {",
									"    var schema = {",
									"        \"type\": \"array\",",
									"        \"items\": {",
									"            \"type\": \"object\"",
									"        }",
									"    };",
									"    var jsonData = JSON.parse(responseBody);",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_local}}/notes",
							"host": [
								"{{api_local}}"
							],
							"path": [
								"notes"
							]
						},
						"description": "view all notes in the system"
					},
					"response": []
				},
				{
					"name": "get note by note id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c2453495-84ad-48fc-88d9-51a75fa90a43",
								"exec": [
									"pm.test(\"server should response with 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should be json array\", function () {",
									"    var schema = {",
									"        \"type\": \"object\"",
									"    };",
									"    var jsonData = JSON.parse(responseBody);",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"object schema must be valid if there is response data\", function () {",
									"    var schema = {",
									"        \"required\": [\"id\", \"userId\", \"videoId\", \"content\"],",
									"        \"properties\": {",
									"            \"id\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"userId\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"videoId\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"content\": {",
									"              \"type\": \"string\"",
									"            }",
									"        }",
									"    };",
									"    var jsonData = JSON.parse(responseBody);",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "455de65d-864b-45dc-b12c-79e3ca84a47a",
								"exec": [
									"if(pm.environment.get(\"note_id\") === undefined){",
									"    pm.environment.set(\"note_id\", 1);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_local}}/notes/{{note_id}}",
							"host": [
								"{{api_local}}"
							],
							"path": [
								"notes",
								"{{note_id}}"
							]
						},
						"description": "view note"
					},
					"response": []
				},
				{
					"name": "get notes of user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c2453495-84ad-48fc-88d9-51a75fa90a43",
								"exec": [
									"pm.test(\"server should response with 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should be json array\", function () {",
									"    var schema = {",
									"        \"type\": \"array\",",
									"        \"items\": {",
									"            \"type\": \"object\"",
									"        }",
									"    };",
									"    var jsonData = JSON.parse(responseBody);",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "16a94063-2306-412d-a159-90d5eb275e58",
								"exec": [
									"if(pm.environment.get(\"user_id\") === undefined){",
									"    pm.environment.set(\"user_id\", 1);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_local}}/notes/user/{{user_id}}",
							"host": [
								"{{api_local}}"
							],
							"path": [
								"notes",
								"user",
								"{{user_id}}"
							]
						},
						"description": "view all notes of a user"
					},
					"response": []
				}
			]
		},
		{
			"name": "get video by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "93658475-1573-4949-81e1-e3640046b1b3",
						"exec": [
							"",
							"pm.environment.set(\"video_id\", \"8286\");",
							"",
							"pm.test(\"Returning a valid response\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Content-Type is json\", function () {",
							"    var contentType = postman.getResponseHeader(\"Content-Type\")",
							"    var expectContentType = \"application/json;charset=UTF-8\"",
							"    pm.expect(contentType).to.eql(expectContentType)",
							"});",
							"",
							"",
							"pm.test(\"ResponseBody is valid\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.video_id).to.eql('8286')",
							"    pm.expect(Object.keys(jsonData).length).to.eql(9)",
							"}) ",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{api_local}}/video/{{video_id}}",
					"host": [
						"{{api_local}}"
					],
					"path": [
						"video",
						"{{video_id}}"
					]
				}
			},
			"response": []
		}
	]
}